///////////////////////////////////////////////////////////////////////////////////////
///   File           :         BA_Math.cpp
///   Description    :         Simple mathematical operations.
//////////////////////////////////////////////////////////////////////////////////////

#include "BA_includeFiles.h"
#include "BA_data.h"

/**********************************************************************/
/*                Create Rodrigues rotation from K                    */
/**********************************************************************/
void SetRotationMatrix(int i, dtype *k, int idx)
{
   //Calculate norm of K
   dtype rNorm, cost, sint;
   rNorm = vecNorm(k, 3);

   if (rNorm == 0){
      cost = 0.5; sint = 1;
   }
   else{
      cost = (1 - cos(rNorm)) / (rNorm*rNorm);
      sint = sin(rNorm) / rNorm;
   }

#if defined _RTVector
   R[i][0] = 1 - (cost*((k[1] * k[1]) + (k[2] * k[2])));
   R[i][1] = (-sint*k[2]) + (cost*k[0] * k[1]);
   R[i][2] = (sint*k[1]) + (cost*k[0] * k[2]);
   R[i][3] = (sint*k[2]) + (cost*k[0] * k[1]);
   R[i][4] = 1 - (cost*((k[0] * k[0]) + (k[2] * k[2])));
   R[i][5] = (-sint*k[0]) + (cost*k[1] * k[2]);
   R[i][6] = (-sint*k[1]) + (cost*k[0] * k[2]);
   R[i][7] = (sint*k[0]) + (cost*k[1] * k[2]);
   R[i][8] = 1 - (cost*((k[0] * k[0]) + (k[1] * k[1])));
#endif

#if defined _PVector
   P[idx] = 1 - (cost*((k[1] * k[1]) + (k[2] * k[2])));
   P[idx+1] = (-sint*k[2]) + (cost*k[0] * k[1]);
   P[idx+2] = (sint*k[1]) + (cost*k[0] * k[2]);
   P[idx+3] = (sint*k[2]) + (cost*k[0] * k[1]);
   P[idx+4] = 1 - (cost*((k[0] * k[0]) + (k[2] * k[2])));
   P[idx+5] = (-sint*k[0]) + (cost*k[1] * k[2]);
   P[idx+6] = (-sint*k[1]) + (cost*k[0] * k[2]);
   P[idx+7] = (sint*k[0]) + (cost*k[1] * k[2]);
   P[idx+8] = 1 - (cost*((k[0] * k[0]) + (k[1] * k[1])));
#endif
}

/**********************************************************************/
/*                       Normal Equation                              */
/**********************************************************************/
void NormalEquations(Jacobian* J)
{
   //Extract the parameters
   int ptId, camId;
   dtype r11, r12, r13, r21, r22, r23, r31, r32, r33, t11, t12, t13, k1, k2, f, x, y, z;

   for (int i = 0; i < num_proj; i++){
      camId = (camidx[i]) * 15; ptId = (num_cam * 15) + ((ptidx[i]) * 3);
      r11 = P[camId]; r12 = P[camId + 1]; r13 = P[camId + 2];
      r21 = P[camId + 3]; r22 = P[camId + 4]; r23 = P[camId + 5];
      r31 = P[camId + 6]; r32 = P[camId + 7]; r33 = P[camId + 8];
      t11 = P[camId + 9]; t12 = P[camId + 10]; t13 = P[camId + 11];
      f = P[camId + 12]; k1 = P[camId + 13]; k2 = P[camId + 14];
      x = P[ptId]; y = P[ptId + 1]; z = P[ptId + 2];

      //Equations
      J[i].Aij[0][0] = (-(f*((2 * k1*x*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (4 * k2*x*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(t11 + r11*x + r12*y + r13*z)) / (t13 + r31*x + r32*y + r33*z) - (f*x*(k1*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + k2*((((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))) + 1)) / (t13 + r31*x + r32*y + r33*z));
      J[i].Aij[0][1] = (-(f*((2 * k1*y*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (4 * k2*y*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(t11 + r11*x + r12*y + r13*z)) / (t13 + r31*x + r32*y + r33*z) - (f*y*(k1*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + k2*((((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))) + 1)) / (t13 + r31*x + r32*y + r33*z));
      J[i].Aij[0][2] = (-(f*((2 * k1*z*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (4 * k2*z*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(t11 + r11*x + r12*y + r13*z)) / (t13 + r31*x + r32*y + r33*z) - (f*z*(k1*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + k2*((((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))) + 1)) / (t13 + r31*x + r32*y + r33*z));
      J[i].Aij[0][3] = (-(f*((2 * k1*x*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (4 * k2*x*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(t11 + r11*x + r12*y + r13*z)) / (t13 + r31*x + r32*y + r33*z));
      J[i].Aij[0][4] = (-(f*((2 * k1*y*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (4 * k2*y*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(t11 + r11*x + r12*y + r13*z)) / (t13 + r31*x + r32*y + r33*z));
      J[i].Aij[0][5] = (-(f*((2 * k1*z*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (4 * k2*z*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(t11 + r11*x + r12*y + r13*z)) / (t13 + r31*x + r32*y + r33*z));
      J[i].Aij[0][6] = ((f*(k1*((2 * x*((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (2 * x*((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + 2 * k2*((2 * x*((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (2 * x*((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))))*(t11 + r11*x + r12*y + r13*z)) / (t13 + r31*x + r32*y + r33*z) + (f*x*(k1*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + k2*((((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))) + 1)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)));
      J[i].Aij[0][7] = ((f*(k1*((2 * y*((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (2 * y*((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + 2 * k2*((2 * y*((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (2 * y*((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))))*(t11 + r11*x + r12*y + r13*z)) / (t13 + r31*x + r32*y + r33*z) + (f*y*(k1*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + k2*((((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))) + 1)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)));
      J[i].Aij[0][8] = ((f*(k1*((2 * z*((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (2 * z*((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + 2 * k2*((2 * z*((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (2 * z*((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))))*(t11 + r11*x + r12*y + r13*z)) / (t13 + r31*x + r32*y + r33*z) + (f*z*(k1*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + k2*((((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))) + 1)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)));
      J[i].Aij[0][9] = (-(f*(k1*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + k2*((((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))) + 1)) / (t13 + r31*x + r32*y + r33*z) - (f*((k1*(2 * t11 + 2 * r11*x + 2 * r12*y + 2 * r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (2 * k2*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(2 * t11 + 2 * r11*x + 2 * r12*y + 2 * r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(t11 + r11*x + r12*y + r13*z)) / (t13 + r31*x + r32*y + r33*z));
      J[i].Aij[0][10]= (-(f*((k1*(2 * t12 + 2 * r21*x + 2 * r22*y + 2 * r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (2 * k2*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(2 * t12 + 2 * r21*x + 2 * r22*y + 2 * r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(t11 + r11*x + r12*y + r13*z)) / (t13 + r31*x + r32*y + r33*z));
      J[i].Aij[0][11]= ((f*(k1*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + k2*((((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))) + 1)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (f*(k1*((2 * ((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (2 * ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + 2 * k2*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*((2 * ((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (2 * ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))))*(t11 + r11*x + r12*y + r13*z)) / (t13 + r31*x + r32*y + r33*z));
      J[i].Aij[0][12]= (-((k1*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + k2*((((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))) + 1)*(t11 + r11*x + r12*y + r13*z)) / (t13 + r31*x + r32*y + r33*z));
      J[i].Aij[0][13]= (-(f*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(t11 + r11*x + r12*y + r13*z)) / (t13 + r31*x + r32*y + r33*z));
      J[i].Aij[0][14]= (-(f*((((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))) * (t11 + r11*x + r12*y + r13*z)) / (t13 + r31*x + r32*y + r33*z));
      J[i].Bij[0][0] = ((f*r31*(k1*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + k2*((((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))) + 1)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) - (f*(k1*((2 * r11*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (2 * r21*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) - (2 * r31*((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) - (2 * r31*((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + 2 * k2*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*((2 * r11*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (2 * r21*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) - (2 * r31*((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) - (2 * r31*((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))))*(t11 + r11*x + r12*y + r13*z)) / (t13 + r31*x + r32*y + r33*z) - (f*r11*(k1*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + k2*((((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))) + 1)) / (t13 + r31*x + r32*y + r33*z));
      J[i].Bij[0][1] = ((f*r32*(k1*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + k2*((((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))) + 1)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) - (f*(k1*((2 * r12*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (2 * r22*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) - (2 * r32*((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) - (2 * r32*((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + 2 * k2*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*((2 * r12*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (2 * r22*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) - (2 * r32*((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) - (2 * r32*((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))))*(t11 + r11*x + r12*y + r13*z)) / (t13 + r31*x + r32*y + r33*z) - (f*r12*(k1*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + k2*((((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))) + 1)) / (t13 + r31*x + r32*y + r33*z));
      J[i].Bij[0][2] = ((f*r33*(k1*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + k2*((((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))) + 1)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) - (f*(k1*((2 * r13*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (2 * r23*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) - (2 * r33*((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) - (2 * r33*((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + 2 * k2*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*((2 * r13*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (2 * r23*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) - (2 * r33*((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) - (2 * r33*((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))))*(t11 + r11*x + r12*y + r13*z)) / (t13 + r31*x + r32*y + r33*z) - (f*r13*(k1*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + k2*((((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))) + 1)) / (t13 + r31*x + r32*y + r33*z));

      J[i].Aij[1][0] = (-(f*((2 * k1*x*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (4 * k2*x*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(t12 + r21*x + r22*y + r23*z)) / (t13 + r31*x + r32*y + r33*z));
      J[i].Aij[1][1] = (-(f*((2 * k1*y*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (4 * k2*y*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(t12 + r21*x + r22*y + r23*z)) / (t13 + r31*x + r32*y + r33*z));
      J[i].Aij[1][2] = (-(f*((2 * k1*z*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (4 * k2*z*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(t12 + r21*x + r22*y + r23*z)) / (t13 + r31*x + r32*y + r33*z));
      J[i].Aij[1][3] = (-(f*((2 * k1*x*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (4 * k2*x*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(t12 + r21*x + r22*y + r23*z)) / (t13 + r31*x + r32*y + r33*z) - (f*x*(k1*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + k2*((((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))) + 1)) / (t13 + r31*x + r32*y + r33*z));
      J[i].Aij[1][4] = (-(f*((2 * k1*y*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (4 * k2*y*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(t12 + r21*x + r22*y + r23*z)) / (t13 + r31*x + r32*y + r33*z) - (f*y*(k1*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + k2*((((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))) + 1)) / (t13 + r31*x + r32*y + r33*z));
      J[i].Aij[1][5] = (-(f*((2 * k1*z*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (4 * k2*z*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(t12 + r21*x + r22*y + r23*z)) / (t13 + r31*x + r32*y + r33*z) - (f*z*(k1*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + k2*((((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))) + 1)) / (t13 + r31*x + r32*y + r33*z));
      J[i].Aij[1][6] = ((f*(k1*((2 * x*((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (2 * x*((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + 2 * k2*((2 * x*((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (2 * x*((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))))*(t12 + r21*x + r22*y + r23*z)) / (t13 + r31*x + r32*y + r33*z) + (f*x*(k1*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + k2*((((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))) + 1)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)));
      J[i].Aij[1][7] = ((f*(k1*((2 * y*((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (2 * y*((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + 2 * k2*((2 * y*((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (2 * y*((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))))*(t12 + r21*x + r22*y + r23*z)) / (t13 + r31*x + r32*y + r33*z) + (f*y*(k1*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + k2*((((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))) + 1)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)));
      J[i].Aij[1][8] = ((f*(k1*((2 * z*((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (2 * z*((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + 2 * k2*((2 * z*((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (2 * z*((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))))*(t12 + r21*x + r22*y + r23*z)) / (t13 + r31*x + r32*y + r33*z) + (f*z*(k1*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + k2*((((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))) + 1)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)));
      J[i].Aij[1][9] = (-(f*((k1*(2 * t11 + 2 * r11*x + 2 * r12*y + 2 * r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (2 * k2*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(2 * t11 + 2 * r11*x + 2 * r12*y + 2 * r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(t12 + r21*x + r22*y + r23*z)) / (t13 + r31*x + r32*y + r33*z));
      J[i].Aij[1][10]= (-(f*(k1*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + k2*((((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))) + 1)) / (t13 + r31*x + r32*y + r33*z) - (f*((k1*(2 * t12 + 2 * r21*x + 2 * r22*y + 2 * r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (2 * k2*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(2 * t12 + 2 * r21*x + 2 * r22*y + 2 * r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(t12 + r21*x + r22*y + r23*z)) / (t13 + r31*x + r32*y + r33*z));
      J[i].Aij[1][11]= ((f*(k1*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + k2*((((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))) + 1)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (f*(k1*((2 * ((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (2 * ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + 2 * k2*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*((2 * ((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (2 * ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))))*(t12 + r21*x + r22*y + r23*z)) / (t13 + r31*x + r32*y + r33*z));
      J[i].Aij[1][12]= (-((k1*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + k2*((((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))) + 1)*(t12 + r21*x + r22*y + r23*z)) / (t13 + r31*x + r32*y + r33*z));
      J[i].Aij[1][13]= (-(f*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(t12 + r21*x + r22*y + r23*z)) / (t13 + r31*x + r32*y + r33*z));
       J[i].Aij[1][14]= (-(f*((((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))) * (t12 + r21*x + r22*y + r23*z)) / (t13 + r31*x + r32*y + r33*z));
      J[i].Bij[1][0] = ((f*r31*(k1*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + k2*((((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))) + 1)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) - (f*(k1*((2 * r11*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (2 * r21*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) - (2 * r31*((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) - (2 * r31*((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + 2 * k2*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*((2 * r11*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (2 * r21*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) - (2 * r31*((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) - (2 * r31*((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))))*(t12 + r21*x + r22*y + r23*z)) / (t13 + r31*x + r32*y + r33*z) - (f*r21*(k1*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + k2*((((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))) + 1)) / (t13 + r31*x + r32*y + r33*z));
      J[i].Bij[1][1] = ((f*r32*(k1*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + k2*((((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))) + 1)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) - (f*(k1*((2 * r12*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (2 * r22*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) - (2 * r32*((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) - (2 * r32*((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + 2 * k2*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*((2 * r12*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (2 * r22*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) - (2 * r32*((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) - (2 * r32*((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))))*(t12 + r21*x + r22*y + r23*z)) / (t13 + r31*x + r32*y + r33*z) - (f*r22*(k1*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + k2*((((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))) + 1)) / (t13 + r31*x + r32*y + r33*z));
      J[i].Bij[1][2] = ((f*r33*(k1*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + k2*((((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))) + 1)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) - (f*(k1*((2 * r13*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (2 * r23*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) - (2 * r33*((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) - (2 * r33*((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + 2 * k2*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*((2 * r13*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + (2 * r23*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) - (2 * r33*((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) - (2 * r33*((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z))) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))))*(t12 + r21*x + r22*y + r23*z)) / (t13 + r31*x + r32*y + r33*z) - (f*r23*(k1*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z))) + k2*((((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))*(((t11 + r11*x + r12*y + r13*z)*(t11 + r11*x + r12*y + r13*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)) + ((t12 + r21*x + r22*y + r23*z)*(t12 + r21*x + r22*y + r23*z)) / ((t13 + r31*x + r32*y + r33*z)*(t13 + r31*x + r32*y + r33*z)))) + 1)) / (t13 + r31*x + r32*y + r33*z));


      /*if (i == 10){
         cout << J[i].Aij[0][0] << "\t" << J[i].Bij[1][1] << endl;
      }*/
   }
}

/**********************************************************************/
/*                          Initialize U, W, V and g                  */
/**********************************************************************/
void UVWgZeroInit()
{
   // U tp 0
   for (int i = 0; i < (num_cam * 225); i++){
      U[i] = 0;
   }
   // V to 0
   for (int i = 0; i < (num_pt * 9); i++){
      V[i] = 0;
   }
   // W to 0
   for (int i = 0; i < (num_proj * 45); i++){
      W[i] = 0;
   }
   //g to 0
   for (int i = 0; i < ((num_cam * 15) + (num_pt * 3)); i++){
      g[i] = 0;
   }

   //cout << U[225] << V[23] << V[2342] << endl;
}

/**********************************************************************/
/*                         UVW calculation                            */
/**********************************************************************/
void UVW(Jacobian* J)
{
   int ptId, camId;

   for (int i = 0; i < num_proj; i++){
      ptId = ptidx[i]; camId = camidx[i];

      //Calculate U = A' * A;15*15
      MatMulU(J[i].Aij, (camId * 225));

      //Calculate V = B' * B;3*3
      MatMulV(J[i].Bij, (ptId * 9));

      //Calculate W = A' * B;15*3
      MatMulW(J[i].Aij, J[i].Bij, (i * 45));

   }
}

/**********************************************************************/
/*                     Ea, Eb calculation                             */
/**********************************************************************/
void EaEb(Jacobian* J)
{
   for (int i = 0; i < num_proj; i++){

      //Calculate Ea = A' * eij;15*1
      MatMulEa(J[i].Aij, i);

      //Calculate Eb = B' * eij;3*1
      MatMulEb(J[i].Bij, i);
   }
}

/**********************************************************************/
/*     Function which checks if norm infinity of g is less than e1    */
/**********************************************************************/
bool criteria()
{
   //dtype e1 = pow(10, -12);
   for (int i = 0; i < ((num_cam * 15) + (num_pt * 3)); i++){
      if (g[i]>e1) return 0;
   }

   return 1;
}

/**********************************************************************/
/*                       Maximum diagonal                             */
/**********************************************************************/
dtype maxUDiagonal()
{
   dtype maxU; int Id;
   maxU = U[0];

   for (int i = 0; i < num_cam; i++){
      for (int j = 0; j < 15; j++){
         Id = (i * 225) + (16 * j);
         if (maxU < U[Id]){
            maxU = U[Id];
         }
      }
   }

   return maxU;
}

/**********************************************************************/
/*                         Maximum Diagonal                           */
/**********************************************************************/
dtype maxVDiagonal()
{
   dtype maxV; int Id;
   maxV = V[0];
   for (int i = 0; i < num_pt; i++){
      for (int j = 0; j < 3; j++){
         Id = (i * 9) + (4 * j);
         if (maxV < V[Id]){
            maxV = V[Id];
         }
      }
   }

   return maxV;
}

/**********************************************************************/
/*                          Augment U and V                           */
/**********************************************************************/
void augmentUV()
{
   int camId,ptId;
   //Augment U
   for (int i = 0; i < num_cam; i++){
      for (int j = 0; j < 15; j++){
         camId = (i * 225) + (16 * j);
         U[camId] = U[camId] + mu;
      }
   }
   //Augment V
   for (int i = 0; i < num_pt; i++){
      for (int j = 0; j < 3; j++){
         ptId = (i * 9) + (4 * j);
         V[ptId] = V[ptId] + mu;
      }
   }
}

/**********************************************************************/
/*                       Inverse V calculation                        */
/**********************************************************************/
void invVCalculation()
{
   for (int i = 0; i < num_pt; i++){
      invCalculation(V + (i * 9), Vinv + (i * 9));
   }
}

/**********************************************************************/
/*                     Y Calculation                                  */
/**********************************************************************/
void yCalculation(dtype* Yij)
{
   //dtype Vinv[9];

   //Yij is calculated
   for (int i = 0; i < num_proj; i++){
      //V^*-1 is calculated
      //invCalculation(V + (ptidx[i] * 9), Vinv);

      //Yij=Wij * V^*-1
      MatMulY(Yij, i);
   }
   //cout << Yij[1640472] << " " << Yij[1640473] << " " << Yij[1640474] << endl;

}

/**********************************************************************/
/*                      Points on each camera                         */
/**********************************************************************/
//void numCamPtsCalculations(int *points)
void numCamPtsCalculations()
{
   int pt, ptNum, i;

   pt = 0; ptNum = 0; i = 0;

   while (1){
      if (ptidx[i] == pt){
         ptNum = ptNum + 1;
         i = i + 1;
      }
      else{
         ncpoints[pt] = ptNum;
         pt = pt + 1;
         ptNum = 0;
      }

      if (i >= num_proj){
         ncpoints[pt] = ptNum;
         break;
      }
   }
}

/**********************************************************************/
/*                        S Calculation                               */
/**********************************************************************/
void sCalculation(dtype** S, dtype* Yij, int *points)
{
   //Declare Intermediate S
   Sint* stmp = new Sint[num_cam*num_cam];
   int ptid = 0; int idx = 0; 

   //Initialize to 0
   for (int i = 0; i < (num_cam*num_cam); i++){
      for (int j = 0; j < 15; j++){
         for (int k = 0; k < 15; k++){
            stmp[i].Sij[j][k] = 0;
         }
      }
   }

   //Intermediate S values
   while (1){
      if (ptid >= num_pt) break;

      for (int i = idx; i < (idx + points[ptid]); i++){
         for (int j = idx; j < (idx + points[ptid]); j++){

            interSCalculation(Yij + (i * 45), j, &stmp[(camidx[i]*num_cam) + camidx[j]]);
         }
      }

      idx = idx + points[ptid];
      ptid = ptid + 1;
   }

   //cout << Yij[0] << "\t" << Yij[1] << "\t" << Yij[2] << endl;
   //cout << W[0] << "\t" << W[1] << "\t" << W[2] << endl;
   //cout << stmp[0].Sij[0][0] << "\t" << stmp[0].Sij[14][14] << "\t" << stmp[0].Sij[9][1] << endl;
   //cout << stmp[1].Sij[0][3] << "\t" << stmp[1].Sij[3][0] << endl;
   //cout << U[0] << endl;

   //Calculate complete S value
   for (int i = 0; i < num_cam; i++){
      for (int j = 0; j < num_cam; j++){
         for (int k = 0; k < 15; k++){
            for (int l = 0; l < 15; l++){
               if (i == j){
                  S[(i * 15) + k][(j * 15) + l] = U[(i * 225) + (k * 15) + l] - stmp[(i * num_cam) + j].Sij[k][l];
               }
               else{
                  S[(i * 15) + k][(j * 15) + l] = -stmp[(i * num_cam) + j].Sij[k][l];
               }
            }
         }
      }
   }

   //cout << S[0][16] << "\t" << S[16][0] << "\t" << S[0][52] << "\t" << S[52][0] << endl;

}

/**********************************************************************/
/*                      Sparsity Check                                */
/**********************************************************************/
int sparsityCheck(dtype** S, int num_cam)
{
   int cam = num_cam * 15; int count = 0;

   /*for (int i = 0; i < cam; i++){
      for (int j = 0; j < cam; j++){
         if (S[i][j] == 0){
            ++count;
         }
      }
   }
   cout << "The values of count is " << count << " and total is " << (cam*cam) << endl;
   count = 0;*/
   for (int i = 0; i < cam; i++){
      for (int j = 0; j <=i; j++){
         if (S[i][j] == 0){
            ++count;
         }
      }
   }
   int nnz = ((cam*(cam + 1)) / 2) - count;
   return (nnz);
}

/**********************************************************************/
/*                      Write A format                                */
/**********************************************************************/
void stAFormat(dtype** S, int num_cam, int nnz)
{
   int cam = num_cam * 15; 
	
   //ofstream outfile("ST_Format.txt");
   FILE *fp;
   fp = fopen("ST_AFormat.txt", "w");

   fprintf(fp,"%%%%MatrixMarket matrix coordinate real symmetric\n");
   fprintf(fp,"%%\n");
   fprintf(fp,"%%   This file is created containing A to solve AX=b using CHOLMOD library\n");
   fprintf(fp,"%%\n");
   fprintf(fp,"\t%d\t%d\t%d\n",cam,cam,nnz);
   for (int i = 0; i < cam; i++){
      for (int j = 0; j <= i; j++){
         if (S[i][j] != 0){
            fprintf(fp,"\t%d\t%d\t%11.5f\n", i+1, j+1, S[i][j]);
         }
      }
   }
	
   //outfile.close();
   fclose(fp);
}

/**********************************************************************/
/*                         rhs Calculation                            */
/**********************************************************************/
void rhsCalculation(dtype* rhs, dtype* Yij)
{
   //rhs to 0
   for (int i = 0; i < (num_cam * 15); i++)
   {
      rhs[i] = 0;
   }

   //Intermediate rhs
   for (int i = 0; i < num_proj; i++){
      interhsCalculation(Yij + (i * 45), rhs, camidx[i], ptidx[i]);
   }

   //Final rhs values
   for (int i = 0; i < num_cam; i++){
      for (int j = 0; j < 15; j++){
         rhs[(i * 15) + j] = g[(i * 15) + j] - rhs[(i * 15) + j];
      }
   }

   //cout << rhs[132] << "\t" << rhs[201] << "\t" << rhs[314] << endl;

}

/**********************************************************************/
/*                          b Format                                  */
/**********************************************************************/
void stbFormat(dtype* rhs, int num_cam)
{
   int cam = num_cam * 15;

   //ofstream outfile("ST_Format.txt");
   FILE *fp;
   fp = fopen("ST_bFormat.txt", "w");

   fprintf(fp, "%%%%MatrixMarket matrix array real general\n");
   fprintf(fp, "%%\n");
   fprintf(fp, "%%   This file is created containing b to solve AX=b using CHOLMOD library\n");
   fprintf(fp, "%%\n");
   fprintf(fp, "\t%d\t%d\n", cam, 1);
   for (int i = 0; i < cam; i++){
      fprintf(fp, "\t%11.5f\n", rhs[i]);
   }

   //outfile.close();
   fclose(fp);
}

/**********************************************************************/
/*                    deltaA Calculation                              */
/**********************************************************************/
void deltaACalculation(dtype** S, dtype* rhs)
{
   //First perform cholesky decomposition on S
   //Declare cholesky decomposed elements.
   int n = num_cam * 15;
   dtype* l = new dtype[(n*(n + 1)) / 2];

   //Cholesky decomposition
   chol_decom(S, l, n);

   //A=LL';LL'x=b;Ly=b;L'x=y
   //Calculate Ly=b
   //Declare y
   dtype* y = new dtype[num_cam * 15];
   forwardCalculation(l, y, rhs);

   //Calculate L'x=y, x = delta
   backwardCalculation(l, y);

   //Delete intermediate elements
   delete[] l;
   delete[] y;
}

/**********************************************************************/
/*                    CHOLMOD                                         */
/**********************************************************************/
void deltaACalculationCHOLMOD(char* AA, char* bb, char* xx)
{
   FILE *fA, *fb, *fX;
   cholmod_sparse *A;
   cholmod_dense *X, *b;
   cholmod_factor *L;
   cholmod_common com;

   if((fA = fopen(AA,"r"))==NULL)
   {
      cout<<AA<<" file does not exist/cannot be opened"<<endl;
   }

   if((fb = fopen(bb,"r"))==NULL)
   {
      cout<<bb<<" file does not exist/cannot be opened"<<endl;
   }
   if((fX = fopen(xx,"w"))==NULL)
   {
      cout<<xx<<" file does not exist/cannot be opened"<<endl;
   }

   //cout<<"CHOLMOD is starting"<<endl;

   cholmod_start(&com);
   A = cholmod_read_sparse(fA, &com);
   //cholmod_print_sparse(A,"A",&com);
   //cholmod_write_sparse(fX,A,NULL,NULL,&com);

   b = cholmod_read_dense(fb, &com);
   //cholmod_print_dense(b,"b",&com);

   fclose(fA);
   fclose(fb);

   L = cholmod_analyze(A, &com);
   cholmod_factorize(A, L, &com);
   //cholmod_print_factor(L, "L", &com);

   X = cholmod_solve(CHOLMOD_A, L, b, &com);
   //cholmod_print_dense(X,"X",&com);

   cholmod_write_dense(fX, X, NULL, &com);

   fclose(fX);

   //Free matrices
   cholmod_free_factor(&L, &com);
   cholmod_free_sparse(&A, &com);
   cholmod_free_dense(&X, &com);
   cholmod_free_dense(&b, &com);
   cholmod_finish(&com);
}

/**********************************************************************/
/*                      delta Calculation                             */
/**********************************************************************/
void extractX(char* x)
{
   string line;
   int row, col;
   FILE *f;

   ifstream infile(x);
   getline(infile, line);
   infile>>row>>col;

   if(row == (num_cam*15))
   {
      for(int i=0;i<row;i++){
         infile>>delta[i];
      }
   }
   else
   {
      cout<<"The output x from CHOLMOD is inappropriate"<<endl;
   }
}

/**********************************************************************/
/*                       deltaB Calculation                           */
/**********************************************************************/
void deltaBCalculation()
{
   //dtype Vinv[9];

   //Initialize deltaB to 0
   int cam = num_cam * 15;
   for (int i = 0; i < (num_pt * 3); i++){
      delta[cam + i] = 0;
   }

   //temporary deltaB is calculated.W'deltaA
   for (int i = 0; i < num_proj; i++){

      //W'deltaA is calculated
      MatMuldeltaB(i);
		
   }

   //eb-W'deltaA
   for (int i = 0; i < (num_pt*3); i++){
      int pt = num_cam * 15;

      delta[pt + i] = g[pt + i] - delta[pt + i];
   }

   //V^*-1*(eb-W'deltaA) Calculation
   for (int i = 0; i < num_pt; i++){
      //V^*-1 is calculated
      //invCalculation(V + (i * 9), Vinv);

      MatMuldeltaBFinal(Vinv+(i*9),i);
   }

   //cout << delta[25485] << " " << delta[32587] << " " << delta[15648] << endl;

}

/**********************************************************************/
